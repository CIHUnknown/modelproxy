{
  "name": "js-to-java",
  "version": "1.0.0",
  "description": "easy way to wrap js object to java object",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/node-modules/js-to-java.git"
  },
  "keywords": [
    "js",
    "java",
    "object",
    "wraper",
    "class"
  ],
  "author": {
    "name": "dead_horse",
    "email": "dead_horse@qq.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/node-modules/js-to-java/issues"
  },
  "homepage": "https://github.com/node-modules/js-to-java",
  "dependencies": {},
  "devDependencies": {
    "autod": "*",
    "contributors": "*",
    "cov": "*",
    "istanbul": "*",
    "mocha": "*",
    "should": "3.3.1"
  },
  "contributors": [
    {
      "name": "dead-horse",
      "email": "dead_horse@qq.com",
      "url": "https://github.com/dead-horse"
    },
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com",
      "url": "https://github.com/fengmk2"
    }
  ],
  "readme": "js-to-java [![Build Status](https://travis-ci.org/node-modules/js-to-java.svg?branch=master)](https://travis-ci.org/node-modules/js-to-java)\n==========\n\neasy way to wrap js object to java object.\n\nin [hessian.js](https://github.com/node-modules/hessian.js), we need to write java classname with js object so make it encode as the write class.\n\n## Install\n\n[![NPM](https://nodei.co/npm/js-to-java.png?downloads=true)](https://nodei.co/npm/js-to-java/)\n\n```bash\nnpm install js-to-java\n```\n\n## Usage\n\n### Example\n\n```js\nvar java = require('js-to-java');\n\n// Java: com.java.Object o = new com.java.Object();\njava('com.java.Object', {}); // => {$class: 'com.java.Object', $: {}}\n\n// Java: Boolean r;\njava.Boolean(true); // => {$class: 'java.lang.Boolean', $: true}\n\n// Java: short[] shorts = new short[] {1, 2, 3};\njava.array('short', [1, 2, 3]); // => {$class: '[short', $: [1, 2, 3]}\n\n// Java: int[] ints = new int[] {1, 2, 3};\njava.array('int', [1, 2, 3]); // same to the next example\njava.array.int([1, 2, 3]); // => {$class: '[int', $: [1, 2, 3]}\n```\n\n### Type Mapping\n\n```js\n  Boolean: 'java.lang.Boolean',\n  boolean: 'boolean',\n  Integer: 'java.lang.Integer',\n  int: 'int',\n  short: 'short',\n  Short: 'java.lang.Short',\n  byte: 'byte',\n  Byte: 'java.lang.Byte',\n  long: 'long',\n  Long: 'java.lang.Long',\n  double: 'double',\n  Double: 'java.lang.Double',\n  float: 'float',\n  Float: 'java.lang.Float',\n  String: 'java.lang.String',\n  char: 'char',\n  chars: 'char[]',\n  Character: 'java.lang.Character',\n  List: 'java.util.List',\n  Set: 'java.util.Set',\n  Iterator: 'java.util.Iterator',\n  Enumeration: 'java.util.Enumeration',\n  HashMap: 'java.util.HashMap',\n  Map: 'java.util.Map',\n  Dictionary: 'java.util.Dictionary'\n```\n\n### abstract class\n\n```js\njava.abstract('AbstractClass', 'Class', {foo: 'bar'});\n```\n\n### Custom combineFunction\n\n```\nvar java =require('js-to-java');\njava.combine = function (className, value) {\n  return {\n    className: className,\n    value: value\n  };\n};\njava('com.test.Object', {}); // =>{className: 'com.test.Object', value: {}}\n```\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "js-to-java@1.0.0",
  "dist": {
    "shasum": "197e4710839635e50f8b1e30ebc01c9d996475a5"
  },
  "_from": "js-to-java@",
  "_resolved": "http://registry.npm.taobao.net/js-to-java/download/js-to-java-1.0.0.tgz"
}
