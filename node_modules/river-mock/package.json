{
  "name": "river-mock",
  "version": "0.0.12",
  "description": "river-mock底层模块",
  "main": "index.js",
  "scripts": {
    "test": "if-mock"
  },
  "repository": {
    "type": "git",
    "url": "git@gitlab.alibaba-inc.com:x/if-mock.git"
  },
  "keywords": [
    "if-mock",
    "river-mock"
  ],
  "dependencies": {
    "mockjs": "0.1.1"
  },
  "author": {
    "name": "xuandao.ws"
  },
  "license": "ISC",
  "readme": "# 数据接口 Mock（river-mock）\r\n\r\n> by 玄道<xuandao.ws@tmall.com>\r\n\r\nriver-mock 为满足数据接口规范（[river-spec][spec]）的数据定义生成 Mock 数据，充分利用了 JSON Schema 的描述能力。\r\n\r\n## 0. 安装\r\n\r\n0. 安装 tnpm：`npm install -g tnpm`\r\n0. 卸载 npm 版 river-mock（如安装过）： `tnpm uninstall -g river-mock`\r\n0. 安装 river-mock： `tnpm install -g river-mock`\r\n\r\n## 1. API\r\n\r\n0. spec2mock(schema)\r\n    0. 将普通的 schema 对象进行生成 mock\r\n    0. return {object}\r\n\r\n0. schema2mock(spec, req)\r\n    * 将符合 [river-spec][spec] 标准的 json 进行生成 mock 数据\r\n    * arguments: \r\n        0. spec{object}\r\n        0. req{string|object},规则如下\r\n            0. 若 req 为空，则返回 response\r\n            0. 若 req 为字符串，则返回 req\r\n            0. 若 req 为对象，则使用[算法规则](http://gitlab.alibaba-inc.com/river/spec/blob/master/README.md#responsemap)进行匹配\r\n                0. 若 req 为 http request 对象，则自动获取 url、method 与 responseMap 进行匹配\r\n                0. 若 req 位 object时\r\n                   * 结构: {query: {search: 'xxx'}, method: 'GET'}\r\n                   * query: url 参数列表\r\n                   * method: http 请求方法\r\n    * return {object};\r\n\r\n## 2. 参考\r\n0. [responseMap](http://gitlab.alibaba-inc.com/river/spec/tree/master#responsemap)\r\n0. [随机生成规则](http://work.tmall.net/issues/13857)\r\n\r\n## 3. 共建\r\n\r\n0. 提[issue](http://gitlab.alibaba-inc.com/river/mock/issues)\r\n\r\n[spec]: http://gitlab.alibaba-inc.com/river/spec",
  "readmeFilename": "README.md",
  "_id": "river-mock@0.0.12",
  "_from": "river-mock@*"
}
