/**
 * river-mock
 * @author xuandao.ws<xuandao.ws@taobao.com>
 * @update 2013.04.02
 */
var mock = require('./lib/river-mock.js');
var url = require('url');
var http = require('http');

//统计调用次数
function track(name, desc){
    //计算发送参数
    var sampling = 1,
        nick="",
        result,
        msg=[
            '[uhttp://if.tmall.net/track/0.0.1/]',
            '[t'+(new Date()*1)+']',
            '[c'+name+']',
            '[s'+sampling+']'
        ].join("")+(desc||"");

    http.get("http://gm.mmstat.com/ued.1.1.2?"+[
        "type=9",
        "id=jstracker",
        "v=0.01",
        "nick="+encodeURIComponent(nick),
        "islogin=0",
        "msg="+encodeURIComponent(msg),
        "file="+encodeURIComponent("http://if.tmall.net/track/0.0.1/"),
        "line="+sampling,
        "t="+new Date().valueOf()
    ].join("&"));
}

module.exports = {
    /**
     * 普通schema进行mock
     * @param schema
     * @returns {string}
     */
    schema2mock: function(schema){
        track('mock.schema2mock', 'mock.schema2mock');
        return mock.handleMock(schema);
    },
    /**
     * if-spec规范文件进行mock，其中包含responseMap
     * @param {string} schema
     * @param {request|object|string} req
     * @return {string}
     */
    spec2mock: function(schema, req, undef){
        var is = (typeof req == 'string');
        if(!is && req !== undef){
            var request = {
                query: url.parse(req['url'], true).query,
                method: req['method']
            }
        }

        var responseMap = is ? req : (req == undef ? 'response' : mock.handleResponseMap(schema, request)),
            ret = mock.handleMock(schema[responseMap]);

        track('mock.spec2mock', 'mock.spec2mock');
        return ret;
    }
}