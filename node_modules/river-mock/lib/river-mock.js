/**
 * river-mock
 * @author xuandao.ws<xuandao.ws@taobao.com>
 * @update 2013.04.02
 */

var Mock = require('mockjs');

function handleNormalMockTemplate(schema, undef){
    var dtype = schema['type'],
        def = schema['default'],
        em = schema['enum'],
        ret,
        pattern,
        format,
        color,
        size,
        max,
        min;

    //存在default，默认返回
    if(!!def)
        return def;

    //存在enum，随机返回
    if(!!em){
        var maxl = em.length - 1;
        var emi = Mock.Random.integer(0, maxl);
        return em[emi];
    }

    //mock规则:
    switch(dtype){
        case 'string':
        {
            min = schema['minLength'] || undef;
            max = schema['maxLength'] || undef;
            format = schema['format'];
            pattern = schema['pattern'];

            if(format == 'URI'){
                ret = def;
            }
            else if(format == 'email'){
                ret = Mock.Random.email();
            }
            else if(RegExp(/PARAM_PIC_SIZE/).test(format)){
                var size = format.match(/PARAM_PIC_SIZE_(.+)_(.+)/);
                ret = Mock.Random.image(size[1]+'x'+size[2]);
            }else if(format == 'TMALL_DETAIL' || format == 'TAOBAO_DETAIL'){
                //天猫、淘宝detail页
                var isTmall = (format == 'TMALL_DETAIL' ? true : false),
                    itemId = Mock.Random.integer(31397137932, 39397137932),
                    url = (isTmall ? 'http://detail.tmall.com/item.htm?id=' : 'http://detail.taobao.com/item.htm?id=');

                ret = (url + itemId);
            }else if(format == 'TMALL_SHOP' || format == 'TAOBAO_SHOP'){
                //天猫、淘宝shop页
                var isTmall = (format == 'TMALL_SHOP' ? true : false),
                    shopId = isTmall ? Mock.Random.string('lower', 3, 7) : Mock.Random.integer(71732898, 7273289),
                    url = (isTmall ? ('http://' + shopId + '.tmall.com') : ('http://shop' + shopId + '.taobao.com/shop/view_shop.htm'));

                ret = url;
            }else{
                if(!def){
                    ret = ((min && max) ? Mock.Random.string(min, max) : Mock.Random.string());
                } else {
                    ret = def;
                }
            }

            return ret;
        }
        case 'number':
        case 'integer':
        {
            min = schema['minimum'] === 0 ? 0 : (schema['minimum'] || 10000);
            max = schema['maximum'] || 99999;
            if(def){
                ret = def;
            }else{
                ret = Mock.Random.integer(min, max);
            }

            return ret;
        }
        case 'boolean':
            ret = Mock.Random.boolean();

            return ret;
    }
}

/**
 * 处理object\array mockTemplate
 * @param schema
 * @returns {object}
 */
function handleObjectMockTemplate(schema){
    var properties = schema['properties'],
        requireProp = schema['required'] || [],
        type = schema['type'],
        hit,
        ret, foo, stype, isObj, max, min;

    //支持object、array的default、enum输出
    if(schema['default'] || schema['enum']){
        if(schema['default']){
            return schema['default']
        }

        var l = schema['enum'].length,
            r = Mock.Random.integer(0, l-1);

        return schema['enum'][r];
    }

    //处理普通object、array
    if(type == 'array'){
        ret = [];
        min = (schema['minItems'] === 0 ? 0 : (schema['minItems'] || 1));
        max = schema['maxItems'] || 1;
        foo = Mock.Random.integer(min, max);
        for(var i =0; i< foo; i++){
            if(schema['items']['type'] == 'object' || schema['items']['type'] == 'array'){
                ret.push(arguments.callee(schema['items']));
            }else{
                ret.push(handleNormalMockTemplate(schema['items']));
            }
        }
    }else if(type == 'object'){
        ret = {};

        for(var key in properties){
            hit = false;
            stype = properties[key]['type'];
            isObj = ((stype == 'object' || stype == 'array') ? true : false);

            //处理require,当前key为在require中时，则随机出现
            for(var i = 0; i<requireProp.length; i++){
                if(requireProp[i] == key){
                    hit = true;
                    break;
                }
            }

            if(hit || Mock.Random.boolean()){
                ret[key] = isObj ? arguments.callee(properties[key]) :
                    handleNormalMockTemplate(properties[key]);
            }
        }
    }

    return ret;
}

/**
 * 处理ResponseMap
 * @name handleResponseMap
 * @param data {json-schema}
 * @param req
 */
function handleResponseMap(data, req){
    var map = data['meta']['responseMap'] || [],
        rules,
        rule,
        ruleprop,
        schema,
        retSchema,
        reqMethod = req['method'] || '',
        reqQuery = req['query'] || {},
        hit = true;

    for(var i = 0; i < map.length; i++){
        rules = map[i]['rule'];
        schema = map[i]['schema'];

        for(var j = 0; j < rules.length; j++){
            rule = rules[j];
            ruleprop = rule['property'];
            switch(rule['type']){
                case 'request':
                {
                    if(schema && ruleprop){
                        if(rule['value']){
                            hit = (reqQuery[ruleprop] == rule['value']);
                            if (!hit && rule['pattern']) {
                                hit = new RegExp(rule['pattern']).test(reqQuery[ruleprop]);
                            }
                        }else if(rule['pattern']){
                            hit = new RegExp(rule['pattern']).test(reqQuery[ruleprop]);
                        }
                    }
                }
                    break;
                case 'response':
                {
                    hit = false;
                }
                    break;
                case 'method':
                {
                    hit = false;
                }
                    break;
                default:
                    hit = false;
            }
        }

        if(hit){
            retSchema = schema;
            break;
        }
    }

    return retSchema || 'response';
}

exports.handleMock = handleObjectMockTemplate;
exports.handleResponseMap = handleResponseMap;
