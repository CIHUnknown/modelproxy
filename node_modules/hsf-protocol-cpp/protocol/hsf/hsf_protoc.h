#ifndef HSF_HSF_PROTOC_H
#define HSF_HSF_PROTOC_H

#include "objects.h"

namespace hsf {

struct remoting_packet;

typedef enum protocol_type {
  HESSIAN = 1,
  JAVA = 2,
  TOP = 3,
  HESSIAN2 = 4
} protocol_type;

typedef enum packet_type {
  HSF,
  HEARTBEAT
} packet_type;

typedef struct hsf_request_object {
  packet_type   type;              // 类型
  protocol_type protocol;          // 序列化协议
  uint64_t      packet_id;         // 包 id
  std::string*  service_signature; // 服务签名
  std::string*  method_name;       // 函数名
  List*         method_args;       // 函数参数
} hsf_request_object;

typedef struct hsf_response_object {
  packet_type   type;              // 类型
  protocol_type protocol;          // 序列化协议
  uint64_t      packet_id;         // 包 id
  Object*       method_ret;        // 返回值
  std::string*  error_msg;         // 错误信息
} hsf_response_object;

void hsf_request_encode(const hsf_request_object& input, std::string& output);
void hsf_response_encode(const hsf_response_object& input, std::string& output);
void hsf_request_heartbeat_encode(uint64_t packet_id, std::string& output);

const char* remoting_packet_decode(const char* input, uint32_t size, struct remoting_packet& ipacket);
const char* hsf_request_decode(const char* input, uint32_t size, hsf_request_object& output);
const char* hsf_response_decode(const char* input, uint32_t size, hsf_response_object& output);

}

#endif
