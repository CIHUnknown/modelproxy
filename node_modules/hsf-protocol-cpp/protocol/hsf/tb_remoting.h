#ifndef HSF_TB_REMOTING_H
#define HSF_TB_REMOTING_H

#include <string>
#include <stdint.h>
namespace hsf {

///////////////////////////////////////////////////////////////////////////////
// 通讯包定义
///////////////////////////////////////////////////////////////////////////////

/**
 * tb-remoting 通讯包
 */
typedef struct remoting_packet {
  uint64_t             packet_id;         // 包 id
  uint8_t              packet_type;       // request(client): 0; response(server): 1
  uint8_t              async;             // 指示请求是否为异步调用，在客户端使用
  uint8_t              protocol;          // 序列化协议
  uint8_t              app_classname_len; // 应用对象类名长度
  uint32_t             conn_len;          // 通讯对象长度
  uint32_t             app_len;           // 应用层对象长度
  const char*          input;             // 输入的数据，在 decode 时用
  std::string*         data;              // 输出的数据，在 encode 时用
  std::string*         error_msg;         // 错误信息，在处理 decode 时用
  void*                request_obj;       // 请求对象
  void*                response_obj;      // 响应对象
  void*                user_data;         // 用户数据
} remoting_packet;

static const uint8_t REMOTING_PACKET_TYPE_CLIENT = 0;
static const uint8_t REMOTING_PACKET_TYPE_SERVER = 1;

///////////////////////////////////////////////////////////////////////////////
// tb-remoting client
///////////////////////////////////////////////////////////////////////////////
/**
 * 序列化的函数回调
 */
typedef void (*remoting_encode_pt)(remoting_packet* opacket);
/**
 * 反序列化的函数回调
 */
typedef void (*remoting_decode_pt)(remoting_packet* ipacket);

/**
 * tb-remoting 的函数回调
 */
struct remoting_handler_t {
  remoting_encode_pt encode_conn;       // 网络层对象的序列化
  remoting_encode_pt encode_app;        // 应用层对象的序列化
  remoting_encode_pt encode_heartbeat;  // 心跳对象的序列化
  remoting_decode_pt decode_conn;       // 网络层对象的反序列化
  remoting_decode_pt decode_app;        // 应用层对象的反序列化
  remoting_decode_pt decode_heartbeat;  // 心跳对象的反序列化

  const char* encode_app_classname;     // 要序列化的应用层对象的类名
  int encode_app_classname_len;         // 要序列化的应用层对象的类名长度
  const char* decode_app_classname;     // 要反序列化的应用层对象的类名
  int decode_app_classname_len;         // 要反序列化的应用层对象的类名长度
};

/**
 * 序列化 tb-remoting （网络层 + 应用层）
 */
extern void remoting_handler_encode(
    remoting_handler_t* rh,
    remoting_packet* opacket);

/**
 * 反序列化 tb-remoting 的网络层部分
 */
extern void remoting_handler_decode_conn(
    remoting_handler_t* rh,
    remoting_packet* ipacket);

/**
 * 反序列化 tb-remoting 的应用层部分
 */
extern void remoting_handler_decode_app(
    remoting_handler_t* rh,
    remoting_packet* ipacket);

extern void remoting_handler_noop(remoting_packet* packet);

///////////////////////////////////////////////////////////////////////////////
// 与 easy_io 相关的部分
///////////////////////////////////////////////////////////////////////////////
/**
 * 获取 remoting 通讯包的 id
 */
extern uint64_t remoting_packet_id();


/**
 * 异步回调的处理模式：
 * 0：使用 IO 线程直接处理回调
 * 1：使用 Worker 线程池去处理回调
 */
extern int remoting_async_worker_process;


///////////////////////////////////////////////////////////////////////////////
// 网络层使用的类名
///////////////////////////////////////////////////////////////////////////////

/*
 * ConnectionRequest，请求
 */
#define CONNECTION_REQUEST_CLASSNAME "com.taobao.remoting.impl.ConnectionRequest"
#define CONNECTION_REQUEST_CLASSNAME_SIZE sizeof(CONNECTION_REQUEST_CLASSNAME) - 1

/*
 * ConnectionResponse，响应
 */
#define CONNECTION_RESPONSE_CLASSNAME "com.taobao.remoting.impl.ConnectionResponse"
#define CONNECTION_RESPONSE_CLASSNAME_SIZE sizeof(CONNECTION_RESPONSE_CLASSNAME) - 1

/*
 * ConnectionHeartBeat，心跳
 */
#define CONNECTION_HEART_BEAT_CLASSNAME "com.taobao.remoting.impl.ConnectionHeartBeat"
#define CONNECTION_HEART_BEAT_CLASSNAME_SIZE sizeof(CONNECTION_HEART_BEAT_CLASSNAME) - 1

}

#endif
