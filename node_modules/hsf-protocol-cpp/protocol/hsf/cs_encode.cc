#include "cs_encode.h"
#include "tb_remoting.h"
#include "hsf_define.h"
#include "hessian_protoc.h"
#include "hessian_input.h"
#include "hessian_output.h"
#include <string>
#include <vector>

namespace hsf {

using namespace std;

/*
 * ProtocolPackage
 */
#define PROTOCOL_PACKAGE_CLASSNAME "com.taobao.config.common.protocol.ProtocolPackage"
#define PROTOCOL_PACKAGE_CLASSNAME_SIZE sizeof(PROTOCOL_PACKAGE_CLASSNAME) - 1

static remoting_handler_t cs_handler = {0};
static void  encode_cs_publisher_request(remoting_packet* opacket);
static std::vector<string> requested_list;

struct cs_publisher_initializer {
  cs_publisher_initializer() {
    memset(&cs_handler, 0, sizeof(remoting_handler_t));
    cs_handler.encode_conn = hessian_encode_connection_request;
    cs_handler.encode_app = encode_cs_publisher_request;
    cs_handler.encode_heartbeat = hessian_encode_connection_heart_beat;
    cs_handler.decode_conn = hessian_decode_connection_response;
    cs_handler.decode_app = remoting_handler_noop;
    cs_handler.decode_heartbeat = remoting_handler_noop;
    //cs_handler.process = remoting_handler_noop;
    cs_handler.encode_app_classname = PROTOCOL_PACKAGE_CLASSNAME;
    cs_handler.encode_app_classname_len = PROTOCOL_PACKAGE_CLASSNAME_SIZE;
    cs_handler.decode_app_classname = PROTOCOL_PACKAGE_CLASSNAME;
    cs_handler.decode_app_classname_len = PROTOCOL_PACKAGE_CLASSNAME_SIZE;
  }
} cs_publisher_init;

void cs_register_encode(const cs_register_object& reg_obj, string& output) {
  hessian_output hout(&output);
  hout.print_8bit('M');
  hout.write_fast_type(CONST_C_STRING("com.taobao.config.common.protocol.PublisherRegReqPacket"));
    hout.write_fast_string(CONST_C_STRING("elements"));
    hout.print_8bit('V');
    hout.write_length(2);
      hout.print_8bit('M');
      hout.write_fast_type(CONST_C_STRING("com.taobao.config.common.protocol.PublisherRegElement"));
        hout.write_fast_string(CONST_C_STRING("clientId"));
        hout.write_fast_string(reg_obj.client_id);
        hout.write_fast_string(CONST_C_STRING("dataId"));
        hout.write_fast_string(reg_obj.data_id);
        hout.write_fast_string(CONST_C_STRING("datumId"));
        hout.write_fast_string(reg_obj.data_id + '@' + reg_obj.addr + "@hsfcpp");
      hout.print_8bit('z');

      hout.print_8bit('M');
      hout.write_fast_type(CONST_C_STRING("com.taobao.config.common.protocol.AttributeElement"));
        hout.write_fast_string(CONST_C_STRING("name"));
        hout.write_fast_string(CONST_C_STRING("!Group"));
        hout.write_fast_string(CONST_C_STRING("value"));
        hout.write_fast_string(reg_obj.group);
      hout.print_8bit('z');
    hout.print_8bit('z');
  hout.print_8bit('z');
}

void cs_publish_encode(const cs_publish_object &pub_obj, string &output) {
  hessian_output hout(&output);

  hout.print_8bit('M');
  hout.write_fast_type(CONST_C_STRING("com.taobao.config.common.protocol.PublisherDataElement"));
    hout.write_fast_string(CONST_C_STRING("clientId"));
    hout.write_fast_string(pub_obj.client_id);
    hout.write_fast_string(CONST_C_STRING("dataId"));
    hout.write_fast_string(pub_obj.data_id);
    hout.write_fast_string(CONST_C_STRING("needAck"));
    hout.write_bool(true);

    hout.write_fast_string(CONST_C_STRING("revision"));
    hout.print_8bit('M');
    hout.write_fast_type(CONST_C_STRING("com.taobao.config.common.Revision"));
      hout.write_fast_string(CONST_C_STRING("revision"));
      hout.write_int64(pub_obj.revision); // revision
    hout.print_8bit('z');

    hout.write_fast_string(CONST_C_STRING("data"));
    hout.print_8bit('V');
    hout.write_fast_type(CONST_C_STRING("java.util.LinkedList"));
    hout.write_length(1);
      hout.print_8bit('M');
      hout.write_fast_type(CONST_C_STRING("com.taobao.config.common.protocol.Swizzle"));
        static char java_string_header[] = { 0xAC, 0xED, 0x00, 0x05, 0x74 };
        hout.write_fast_string(CONST_C_STRING("bytes"));
        hout.print_8bit('B');
        hout.print_16bit(pub_obj.data.size() + sizeof(java_string_header) + 2);
        hout.print_raw_bytes(java_string_header, sizeof(java_string_header));
        hout.print_16bit(pub_obj.data.size());
        hout.print_raw_bytes(pub_obj.data.data(), pub_obj.data.size());

        hout.write_fast_string(CONST_C_STRING("serialization"));
        hout.write_int32(1);
      hout.print_8bit('z');
    hout.print_8bit('z');
  hout.print_8bit('z');
}

static void encode_cs_publisher_request(remoting_packet* opacket) {
  hessian_output hout(opacket->data);
  hout.add_ref();
  hout.print_8bit('M');
  hout.write_fast_type(CONST_C_STRING(PROTOCOL_PACKAGE_CLASSNAME));

    hout.write_fast_string(CONST_C_STRING("elements"));
    hout.add_ref();
    hout.print_8bit('V');
    hout.write_length(1 + requested_list.size());
      hout.add_ref();
      hout.print_8bit('M');
      hout.write_fast_type(CONST_C_STRING("com.taobao.config.common.protocol.VersionElement"));
        hout.write_fast_string(CONST_C_STRING("major"));
        hout.write_int32(1);
        hout.write_fast_string(CONST_C_STRING("minor"));
        hout.write_int32(2);
        hout.write_fast_string(CONST_C_STRING("build"));
        hout.write_int32(0);
      hout.print_8bit('z');

  // 将准备好的数据直接写出去
  for (unsigned i = 0; i < requested_list.size(); ++i) {
    hout.print_raw_bytes(requested_list[i].data(), requested_list[i].size());
  }

    hout.print_8bit('z'); // end of elements
  hout.print_8bit('z');
}

void cs_do_publish_encode(const vector<string>& bufs, string &output) {
  remoting_packet opacket = {0};
  opacket.protocol = 1;
  opacket.data = &output;
  requested_list.clear();
  requested_list = bufs;
  remoting_handler_encode(&cs_handler, &opacket);
}

}
