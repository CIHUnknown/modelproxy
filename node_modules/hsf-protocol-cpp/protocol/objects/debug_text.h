#ifndef HSF_DEBUG_TEXT_H
#define HSF_DEBUG_TEXT_H

#include "objects.h"
#include <set>
#include <iosfwd>

namespace hsf {

/**
 * Debug Text 输出处理器对象
 *
 * @param obj 目标对象
 * @param os 输出的目标流
 * @param indent 当前前置缩进数量
 * @param dejaVu 已输出的对象集合（避免循环输出）
 */
typedef void (*debug_text_handler_pt)(const Object* obj,
                                      std::ostream& os,
                                      int indent,
                                      std::set<const Object*>* dejaVu);

/**
 * 用于扩展 Debug Text 输出处理器
 *
 * @param type_id 对象的 type_id
 * @param handler 对象的 Debug Text 输出处理器
 */
void debug_text_regist_handler(uint32_t type_id, debug_text_handler_pt handler);

/**
 * 输出指定的对象 obj 到 os
 * @param obj 目标对象
 * @param os 输出的目标流
 * @param indent 当前前置缩进数量
 * @param dejaVu 已输出的对象集合（避免循环输出）
 */
void debug_text_handle_object(const Object* obj,
                              std::ostream& os,
                              int indent,
                              std::set<const Object*>* dejaVu);

/**
 * 协助检查对象是否循环输出
 * @return true：已处理并输出，勿再处理；
 *         false：未曾循环输出，需要继续处理
 */
bool debug_text_handle_dejaVu(const Object* obj,
                              std::ostream& os,
                              int indent,
                              std::set<const Object*>* dejaVu);

/**
 * 协助处理 List 中的各个 item 的输出
 */
void debug_text_handle_list_element(const List* list,
                                    std::ostream& os,
                                    int indent,
                                    std::set<const Object*>* dejaVu);

/**
 * 协助处理 Map 中的 key/value 的输出
 */
void debug_text_handle_map_element(const Map* map,
                                   std::ostream& os,
                                   int indent,
                                   std::set<const Object*>* dejaVu);

}
#endif
