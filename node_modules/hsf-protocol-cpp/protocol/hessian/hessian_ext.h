#ifndef HSF_HESSIAN_EXTENSION_H
#define HSF_HESSIAN_EXTENSION_H

#include "objects.h"
#include <string>
#include <stdint.h>
/*
 * Object 对象的 Hessian 序列化器 / 反序列化器
 */
namespace hsf {

class hessian_input;
class hessian_output;

/**
 * Object 对象的 Hessian 序列化器的类型
 */
typedef void (*hessian_serialize_pt)(const Object* obj, hessian_output& hout);
/**
 * Object 对象的 Hessian 反序列化器的类型
 */
typedef Object* (*hessian_deserialize_pt)(const std::string& type, hessian_input& hin);

/**
 * 用于扩展序列化器
 *
 * @param type_id 对象的 type_id
 * @param serializer 对象的序列化器
 */
void hessian_regist_serializer(uint32_t type_id, hessian_serialize_pt serializer);

/**
 * 用于扩展反序列化器
 *
 * @param ext_type 对象的扩展类型
 * @param type 对象的类型名(第一个字符为“*”则为后缀表达式)
 * @param deserializer 对象的反序列化器
 */
void hessian_regist_deserializer(Object::ObjectType ext_type, const std::string& type, hessian_deserialize_pt deserializer);

/**
 * 获得对应的序列化器
 *
 * @param obj 待序列化的对象
 */
hessian_serialize_pt hessian_get_serializer(const Object* obj);

/**
 * 获得对应的反序列化器
 *
 * @param ext_type 对象的扩展类型
 * @param type 对象的类型名
 */
hessian_deserialize_pt hessian_get_deserializer(Object::ObjectType ext_type, const std::string& type);

}
#endif
