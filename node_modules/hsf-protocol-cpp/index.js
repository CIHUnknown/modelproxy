/*!
 * hsf-protocol-cpp - index.js
 * Copyright(c) 2014 Taobao.com
 * Author: busi.hyy <busi.hyy@taobao.com>
 */

'use strict';

/**
 * Module dependencies.
 */

var fs = require('fs');
var path = require('path');

var releasePath = path.join(__dirname, 'build', 'Release', 'hsfProtocol.node');
var debugPath = path.join(__dirname, 'build', 'Debug', 'hsfProtocol.node');

var protocol;
if (fs.existsSync(releasePath)) {
  protocol = require(releasePath);
} else if (fs.existsSync(debugPath)) {
  protocol = require(debugPath);
} else {
  throw new Error('can not found hsfProtocol.node, maybe build error');
}

/**
 * encode hsf request
 * @param {Number} packetId
 * @param {Object} req
 *   - {String} serverSignature
 *   - {String} methodName
 *   - {Array} args
 *
 * @return {Buffer}
 */

exports.requestEncode = function (packetId, req) {
  return protocol.requestEncode(req.serverSignature,
    req.methodName, packetId, req.args);
};

/**
 * decode request buffer to object
 * @param {Buffer} buf
 * @return {Object}
 */

exports.requestDecode = protocol.requestDecode;

/**
 * encode hsf response
 * @param {Number} packetId
 * @param {Object} res
 *   - {String} errorMsg
 *   - {Object} appResponse
 * @return {Buffer}
 */

exports.responseEncode = function (packetId, res) {
  return protocol.responseEncode(packetId, res.appResponse, res.errorMsg);
};

/**
 * decode response buffer to object
 * @param {Buffer} buf
 * @return {Object}
 */

exports.responseDecode = protocol.responseDecode;

/**
 * encode request heartbeat
 * @param {Number} packetId
 * @return {Buffer}
 */

exports.heartbeatEncode = protocol.heartbeatEncode;


/**
 * generate configserver request body
 * @param {String} id
 * @param {String} group
 * @return {Buffer}
 */

exports.genReqBody = protocol.genReqBody;

/**
 * cs regist encode method
 * @param {String} clientId
 * @param {String} dataId
 * @param {String} group
 * @param {String} addr
 * @return {Buffer}
 */

exports.csRegistEncode = protocol.csRegistEncode;

/**
 * cs publish encode method
 * @param {String} clientId
 * @param {String} dataId
 * @param {String} data
 * @param {Number} revision
 * @return {Buffer}
 */

exports.csPublishEncode = protocol.csPublishEncode;

/**
 * cs do publish encode method
 * @param {Array} bufs
 * @return {Buffer}
 */

exports.csDoPublishEncode = protocol.csDoPublishEncode;
