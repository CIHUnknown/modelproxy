{
  "name": "ali-logger",
  "version": "0.4.1",
  "description": "logger for alibaba",
  "keywords": [
    "logger",
    "log"
  ],
  "author": {
    "name": "苏千",
    "email": "suqian.yf@taobao.com",
    "url": "http://fengmk2.github.com"
  },
  "homepage": "http://gitlab.alibaba-inc.com/node/logger",
  "repository": {
    "type": "git",
    "url": "git@gitlab.alibaba-inc.com:node/logger.git"
  },
  "dependencies": {
    "address": "0.0.3",
    "logfilestream": "0.1.0",
    "ms": "0.6.2",
    "urllib": "0.5.11",
    "utility": "0.1.11"
  },
  "devDependencies": {
    "ali-contributors": "*",
    "alicov": "*",
    "autod": "*",
    "benchmark": "*",
    "istanbul": "*",
    "connect": "2.14.3",
    "connect-rid": "0.0.1",
    "fs-extra": "0.8.1",
    "jshint": "*",
    "microtime": "0.5.1",
    "mm": "0.2.1",
    "mocha": "*",
    "moment": "2.5.1",
    "pedding": "0.0.3",
    "should": "3.2.0-beta1",
    "supertest": "0.10.0"
  },
  "scripts": {
    "test": "make test-all"
  },
  "config": {
    "blanket": {
      "pattern": "//^((?!(node_modules|test)).)*$/"
    },
    "alicov": {
      "threshold": 90
    }
  },
  "contributors": [
    {
      "name": "苏千",
      "email": "suqian.yf@alipay.com",
      "url": "https://work.alibaba-inc.com/work/u/43624"
    },
    {
      "name": "不四",
      "email": "busi.hyy@taobao.com",
      "url": "https://work.alibaba-inc.com/work/u/52624"
    }
  ],
  "readme": "# ali-logger [![status](http://toast.corp.taobao.com/task/state/id/5520)](http://toast.corp.taobao.com/task/view/id/5520)\n\n适用于哈勃等监控系统错误日志的logger模块\n\n## Install\n\n```js\n$ npm install tnpm -g\n$ tnpm install ali-logger\n```\n\n## Usage\n\n### debug(), info(), warn() and error()\n\n默认支持 `debug`, `info`, `warn` 和 `error` 四种类型的日志\n\n`log` 默认是指向到 `info`.\n\n```js\nvar logger = require('ali-logger');\nlogger.init({\n  logdir: '/tmp/logs',\n  // duration: 3600000 * 24,\n  // nameformat: '[{{level}}.]YYYY-MM-DD[.log]',\n  // stderr: false, // show error stack in stderr or not\n  // level: logger.INFO, // 默认输出 INFO 及以上级别的日志\n  // stdoutLevel: logger.ERROR, // 输出到标准输出的最低级别, 默认不输出\n});\n\nlogger.debug('hello world debug');\nlogger.log('hello world');\nlogger.info('hello world');\nlogger.warn('hello warn');\n\nvar err = new Error('test error');\nerr.url = '/foo';\nerr.data = { foo: 'bar' };\nlogger.error(err);\nlogger.warn(err);\n\n// Listen `logerror` event\n\nlogger.on('logerror', function (err, msg) {\n  console.log(err.message);\n  console.log(err.stack);\n  console.log(err.url);\n  console.log(err.hostname);\n  console.log(err.time);\n  console.log(err.data);\n});\nlogger.error(new Error('test logerror'));\n```\n\n### 开发调试输出到控制台\n\n如果设置了 `stdoutLevel=DEBUG`, 则会开始 DEBUG 及以上级别的日志输出到标准输出.\n\n![1](http://ww4.sinaimg.cn/large/6cfc7910jw1efhe8xlwrgj20l803mwg5.jpg)\n\n### 通过环境变量打开 DEBUG 模式\n\n```bash\n# 会默认将 logger level 设置为 DEBUG\n$ NODE_ENV=debug node app.js\n```\n\n### 自定义日志方法\n\n通过传递 methods 参数，可以新增自定义日志方法，同时可以指定该方法的日志级别\n\n```js\nlogger.init({\n  methods: [{\n    name: 'dberror',\n    level: logger.ERROR\n  }]\n})\n```\n\nmethods 可接受各种形式的参数：\n\n```\nmethods: 'trace'\nmethods: {name: 'trace', level: logger.TRACE}\nmethods: ['trace', 'mysql']\n```\n\n#### Level\n\n日志级别分为\n\n```\nDEBUG: -1\nINFO: 0\nWARN: 1\nERROR: 2\nTRACE: 3\n```\n\n自定义日志默认分级为 TRACE（最高级别）\n\n### accessLog()\n\n```js\nlogger.init({\n  // ... other options ...\n  // access log options\n  accessLog: true,\n});\n\n// access log\nlogger.accessLog(ip, usec, method, url, status, bytes, referer, userAgent);\n// {ip}     {usec} {pid} [{logdate}]                \"{method} {url}\"         {status} {bytes} \"{referer}\" \"{userAgent}\"\n// 127.0.0.1 49429 110 [17/Apr/2013:14:21:01 +0800] \"GET /foo/bar?start=1984-10-21\" 200 17326 \"-\" \"-\"\n\n// 只输出error日志\nlogger.setLevel(logger.ERROR);\n// 只输出warn, error日志\nlogger.setLevel(logger.WARN);\n```\n\n### accessLogMiddleware() on connect\n\n```js\nlogger.init({\n  // ... other options ...\n  // access log options\n  accessLog: true,\n});\n\nvar app = connect();\napp.use(logger.accessLogMiddleware({\n  timer: microtime,\n  // method: 'accessLogExtra', // if you want to log backend time, use need to set this\n}));\napp.use(function (req, res) {\n  res.setHeader('Content-Length', req.url.length);\n  // res.accessLogBackendTime = 0; // backend time\n  // res.accessLogHitCache = 0; // hit cache or not\n  res.end(req.url);\n});\n```\n\n### oplog()\n\n* 集团行为日志: http://docs.alibaba-inc.com/pages/viewpage.action?pageId=106826701\n* [集团行为日志平台_查询服务DevGuideV0.2.0](http://docs.alibaba-inc.com/pages/viewpage.action?pageId=106367459)\n* TT 配置联系 @TT的技术支持\n\n#### 本地记录日志，通过TT进行推送\n\n```js\nlogger.init({\n  // ... other options ...\n  // oplog options\n  oplogOptions: {\n    systemId: 'xxxxxx_xxx-xx-xx-xx-xx',\n    systemName: '系统名称',\n  },\n});\n\nlogger.oplog({\n  uid: 43624,\n  nick: '苏千',\n  realname: '袁锋',\n  clientId: 'IP: 10.7.68.72, User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.37 Safari/537.36'\n}, {\n  traceId: 123,\n  targetType: '排行榜',\n  customerId: 320,\n  name: '更新',\n  level: 'NORMAL',\n  item: '女装',\n  itemId: 16,\n  content: {name: ['旧女装', '新女装'], level: [1, 2]}, // => name\\u0002旧女装\\u0002新女装\\u0003level\\u00021\\u00022\n  desc: '更新女装类目名称和等级信息'\n});\n```\n\n#### 直接http发送日志\n此方法用于访问量不大的无线上环境的服务，将直接通过http方式将日志推送到oplog线上服务器。\noplog api 服务地址：\n\n```\n日常： http://10.20.153.135:5927\n线上： http://api.oplog.alibaba-inc.com\n```\n\n```js\nlogger.init({\n  // ... other options ...\n  // oplog options\n  oplogOptions: {\n    systemId: 'xxxxxx_xxx-xx-xx-xx-xx',\n    systemName: '系统名称',\n    url: 'http://10.20.153.135:5927'\n  },\n});\n\nlogger.oplogByHttp({\n  uid: 43624,\n  nick: '苏千',\n  realname: '袁锋',\n  clientId: 'IP: 10.7.68.72, User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.37 Safari/537.36'\n}, {\n  traceId: 123,\n  targetType: '排行榜',\n  customerId: 320,\n  name: '更新',\n  level: 'NORMAL',\n  item: '女装',\n  itemId: 16,\n  content: {name: ['旧女装', '新女装'], level: [1, 2]}, // => name\\u0002旧女装\\u0002新女装\\u0003level\\u00021\\u00022\n  desc: '更新女装类目名称和等级信息'\n}, callback);\n```\n\n## Benchmark\n\n```bash\n$ node benchmark/logdate.js\n\nlogger.info(\"ITier200:%s %s %s %s:%s\", use, query, rows.length, tablename, use) x 56,805 ops/sec ±4.06% (82 runs sampled)\nlogger.warn(\"ITier200:%s %s %s %s:%s\", use, query, rows.length, tablename, use) x 55,124 ops/sec ±4.90% (82 runs sampled)\nlogger.accessLog('172.168.2.100', 1000000, 'OPTIONS', '/foo/bar/food', 302, 888, '-', 'hsf') x 82,084 ops/sec ±6.75% (69 runs sampled)\nignore info level: logger.info(\"ITier200:%s %s %s %s:%s\", use, query, rows.length, tablename, use) x 15,134,057 ops/sec ±0.76% (93 runs sampled)\nFastest is ignore info level: logger.info(\"ITier200:%s %s %s %s:%s\", use, query, rows.length, tablename, use)\n```\n\n## Authors\n\n```bash\n$ git summary\n\n project  : logger\n repo age : 9 months\n active   : 13 days\n commits  : 37\n files    : 10\n authors  :\n    35  苏千                  94.6%\n     2  不四                  5.4%\n```\n",
  "readmeFilename": "README.md",
  "_id": "ali-logger@0.4.1",
  "_from": "ali-logger@*"
}
