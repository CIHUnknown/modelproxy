{
  "name": "js-to-java",
  "version": "0.0.2",
  "description": "easy way to wrap js object to java object",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "files": [
    "index.js"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/dead-horse/js-to-java.git"
  },
  "keywords": [
    "js",
    "java",
    "object",
    "wraper",
    "class"
  ],
  "author": {
    "name": "dead_horse",
    "email": "dead_horse@qq.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/dead-horse/js-to-java/issues"
  },
  "homepage": "https://github.com/dead-horse/js-to-java",
  "devDependencies": {
    "istanbul": "*",
    "mocha": "*",
    "should": "3.1.3"
  },
  "readme": "js-to-java\n==========\n\neasy way to wrap js object to java object.\n\nin [hessian.js](https://github.com/dead-horse/hessian.js), we need to write java classname with js object so make it encode as the write class.\n\n## Install\n\n```\nnpm install js-to-java\n```\n## Usage\n\n### Example\n\n```js\nvar java = require('js-to-java');\n\njava('com.java.Object', {}); // => {$class: 'com.java.Object', $: {}}\n\njava.Boolean(true); // => {$class: 'java.lang.Boolean', $: true}\n\njava.array('short', [1, 2, 3]); // => {$class: '[short', $: [1, 2, 3]}\n\njava.array.int([1, 2, 3]); // => {$class: '[int', $: [1, 2, 3]}\n```\n\n### Type Mapping\n\n```js\n  Boolean: 'java.lang.Boolean',\n  boolean: 'boolean',\n  Integer: 'java.lang.Integer',\n  int: 'int',\n  short: 'short',\n  Short: 'java.lang.Short',\n  byte: 'byte',\n  Byte: 'java.lang.Byte',\n  long: 'long',\n  Long: 'java.lang.Long',\n  double: 'double',\n  Double: 'java.lang.Double',\n  float: 'float',\n  Float: 'java.lang.Float',\n  String: 'java.lang.String',\n  char: 'char',\n  chars: 'char[]',\n  Character: 'java.lang.Character',\n  List: 'java.util.List',\n  Set: 'java.util.Set',\n  Iterator: 'java.util.Iterator',\n  Enumeration: 'java.util.Enumeration',\n  HashMap: 'java.util.HashMap',\n  Map: 'java.util.Map',\n  Dictionary: 'java.util.Dictionary'\n```\n\n### Custom combineFunction\n\n```\nvar java =require('js-to-java');\njava.combine = function (className, value) {\n  return {\n    className: className,\n    value: value\n  };\n};\njava('com.test.Object', {}); // =>{className: 'com.test.Object', value: {}}\n```\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "js-to-java@0.0.2",
  "_from": "js-to-java@0.0.2"
}
