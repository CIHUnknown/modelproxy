/**!
 * hsf-protocol - lib/hessian.js
 * Copyright(c) 2014 Alibaba Group Holding Limited.
 *
 * Authors:
 *   busi.hyy <busi.hyy@taobao.com>
 */

var hessian = require('hessian.js');
var constant = require('./constant');
var java = require('js-to-java');
var utils = require('./utils');

exports.encodeRequestConn = function (packetId) {
  var buf = new Buffer(constant.REQUEST_CONN_TPL);
  utils.writePacketId(buf, packetId, 119);
  return buf;
};

exports.decodeRequestConn = function (buf) {
  var res;
  try {
    res = hessian.decode(buf);
  } catch (err) {
    throw new Error('fail to parse ConnectionRequest: ' + err.message);
  }
  if (res && res.ctx && typeof res.ctx.id === 'number') {
    return { packetId: res.ctx.id };
  }
  return { errorMsg: 'fail to get packet id from ConnectionRequest' };
};

exports.encodeResponseConn = function (packetId, errorMsg) {
  var connectObj = java(constant.CONNECTION_RESPONSE_CLASSNAME, {
    ctx: java(constant.CONNECTION_RESPONSE_CTX, {
      id: java.long(packetId)
    })
  });
  if (errorMsg) {
    connectObj.$.errorMsg = errorMsg;
  }

  return hessian.encode(connectObj);
};

exports.decodeResponseConn = function (buf) {
  var res;
  try {
    res = hessian.decode(buf);
  } catch (err) {
    return { errorMsg: 'fail to parse ConnectionResponse: ' + err.message };
  }

  if (!res || !res.ctx || !res.ctx.id) {
    return { errorMsg: 'fail to get packet id from ConnectionResponse' };
  }

  var out = {
    packetId: res.ctx.id
  };

  if (res.errorMsg) {
    out.errorMsg = res.errorMsg;
  } else {
    out.errorMsg = '';
  }
  if (res.errorStack) {
    out.errorMsg += '\nError Stack:\n' + res.errorStack;
  }

  return out;
};

/**
 * encode the request object
 * @param {Object} req
 *   - {String} serverSignature
 *   - {String} methodName
 *   - {Array} args
 * @return {Buffer}
 */
exports.encodeRequest = function (req) {
  var args = req.args || [];
  var argSigs = [];
  for (var i = 0; i < args.length; i++) {
    argSigs.push(utils.getJavaClassname(args[i]));
  }

  var reqObj = java(constant.HSF_REQUEST_CLASSNAME, {
    targetServiceUniqueName: req.serverSignature,
    methodName: req.methodName,
    methodArgSigs: java.array('string', argSigs)
  });

  var encoder = new hessian.Encoder();

  encoder.writeObject(reqObj);
  for (var j = 0; j < args.length; j++) {
    encoder.write(args[j]);
  }

  return encoder.get();
};


exports.decodeRequest = function (buf) {
  var decoder = new hessian.Decoder(buf);
  var reqObj = decoder.readObject();
  var req = {};
  req.methodName = reqObj.methodName;
  req.serverSignature = reqObj.targetServiceUniqueName;
  req.args = [];

  if (!reqObj.methodArgSigs || !reqObj.methodArgSigs.length) {
    return req;
  }
  for (var i = 0; i < reqObj.methodArgSigs.length; i++) {
    req.args.push(decoder.read());
  }
  return req;
};

/**
 * encode the response object
 * @param {Object} val
 *   - {Boolean} isError
 *   - {String} errorMsg
 *   - {Object} appResponse
 * @return {Buffer}
 */
exports.encodeResponse = function (val) {
  var resObj = {
    $class: constant.HSF_RESPONSE_CLASSNAME,
    $: val
  };
  return hessian.encode(resObj);
};

exports.decodeResponse = function (buf) {
  var result = hessian.decode(buf);
  if (!result) {
    return;
  }
  var response = result.appResponse;

  // if exception
  if (response
    && response.detailMessage
    && response.stackTrace
    && response.cause) {
    var err = new Error(response.detailMessage);
    err.javaTrace = response.stackTrace;
    result.appResponse = err;
  }

  return result;
};

exports.encodeHeartBeat = function (userData) {
  userData = userData || null;
  var heatbeat = {
    $class: constant.CONNECTION_HEART_BEAT_CLASSNAME,
    $: { clientUrl: userData }
  };
  return hessian.encode(heatbeat);
};

exports.decodeHeartBeat = function (buf) {
  var res = hessian.decode(buf);
  return { userData: res.clientUrl };
};

exports.encodeCsRequest = function (list) {
  var elements = [];
  elements.push(java('com.taobao.config.common.protocol.VersionElement', {
    major: 1,
    minor: 2,
    build: 0
  }));
  elements = elements.concat(list);

  var reqObj = java(constant.CS_PROTOCOL_CLASSNAME, {
    elements: elements
  });
  return hessian.encode(reqObj);
};
