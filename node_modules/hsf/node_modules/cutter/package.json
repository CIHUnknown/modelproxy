{
  "name": "cutter",
  "description": "Cut buffer to package",
  "version": "0.0.3",
  "repository": {
    "type": "git",
    "url": "git@github.com:dead-horse/cutter.git"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "visionmedia-jscoverage": "*"
  },
  "author": {
    "name": "dead_horse",
    "email": "dead_horse@qq.com",
    "url": "http://deadhorse.me"
  },
  "main": "./index.js",
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": ">= 0.6"
  },
  "directories": {
    "lib": "./lib"
  },
  "keywords": [
    "socket",
    "net",
    "buffer",
    "packet"
  ],
  "readme": "cutter\n======\n\nA cutter for head-body buffer.\nMany network protocol will use packets composed of a fixed length \"head\" and a variable length \"body\", the \"data\" event emitted by node socket probably not a complete packet, but part of several packets. So this `cutter` will help to get packets.\n\n## Usage   \n\n```js\nvar Cutter = require('cutter');\nvar net = require('net');\n\n/**\n * must return length of head + body\n */\nfunction packetLength(data) {\n  return 4 + data[0] + (data[1] << 8) + (data[2] << 16);\n}\n\nvar server = net.createServer(function(socket) {\n  var cutter = new Cutter(4, packetLength);\n  cutter.on('packet', function(packet) {\n    var head = packet.slice(0, 4);\n    var body = packet.slice(4, packet.length);\n  });\n  socket.on('data',function(data) {\n    cutter.emit('data', data);\n  });\n});\n\nserver.listen(12345);\n```\n\n## Install    \n * Clone from github   \n * Use `npm`   \n\n ```\n npm install cutter\n ```\n\n ## License   \n MIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dead-horse/cutter/issues"
  },
  "homepage": "https://github.com/dead-horse/cutter",
  "_id": "cutter@0.0.3",
  "_from": "cutter@0.0.3"
}
