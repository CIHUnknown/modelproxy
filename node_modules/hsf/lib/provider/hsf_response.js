/*!
 * hsf - provider/response.js
 * Copyright(c) 2012 Taobao.com
 * Author: busi.hyy <busi.hyy@taobao.com>, suqian.yf <suqian.yf@taobao.com>
 */

/**
 * Module dependencies.
 */
var EventEmitter = require('events').EventEmitter;
var util = require('util');
var transcode = require('../transcode');

/**
 * HSFResponse
 * @param {HSFServer} hsfServer
 * @param {Socket} socket
 * @param {String} packetId
 * @param {Boolean} nohsf
 * @param {Boolean} shouldKeepAlive, should keepalive or not.
 * @constructor
 */
function HSFResponse(hsfServer, socket, packetId, methodName, nohsf, shouldKeepAlive) {
  EventEmitter.call(this);
  this.remoteAddress = socket.remoteAddress;
  this.socket = socket;
  this.server = hsfServer;
  this.method = methodName;
  this.packetId = packetId;
  this.nohsf = nohsf;
  this.starttime = this.now();
  this.sended = false;
  this.shouldKeepAlive = shouldKeepAlive;
}

util.inherits(HSFResponse, EventEmitter);

/**
 * Get current datetime
 * @return {Number}
 */
HSFResponse.prototype.now = function () {
  return Date.now();
};

/**
 * Send result.
 * @param  {String} result, only `String` format result.
 */
HSFResponse.prototype.send = function (result) {
  if (this.sended) {
    return;
  }
  this.sended = true;
  if (!this.socket || !this.socket.write || !this.socket.writable) {
    this.emit('end');
    return 0;
  }
  var serialized;
  try {
    serialized = transcode.responseEncode(this.packetId, result, null, this.nohsf);
  } catch (err) {
    serialized = transcode.responseEncode(this.packetId, 'e', err.message, this.nohsf);
  }
  this.socket.write(serialized);
  this.emit('end');
  if (!this.shouldKeepAlive) {
    this.socket.end();
  }
  return serialized.length;
};

module.exports = HSFResponse;
