/*!
 * hsf - provider/auto_check.js
 * Copyright(c) 2012 - 2013 Taobao.com
 * Author: busi.hyy <busi.hyy@taobao.com>
 */

'use strict';

/**
 * Module dependencies.
 */
var hsf = require('../');
var os = require('os');
var EventEmitter = require('events').EventEmitter;
var util = require('util');

/**
 * 发布服务的自检
 * 1.从config server获取地址，检查这台机器是否发布成功
 * 2.用node客户端调用所有注册的方法，检查是否会报错
 * 一旦发现有错误，则会抛出autocheck事件，hsf server监听到后向外抛出
 * 应用通过监听hsf server的autocheck事件，可以获取到自检结果
 * @param {Object} options
 */
function AutoChecker(options) {
  EventEmitter.call(this);
  var client = hsf.createClient(options);
  this.consumer = client.createConsumer({
    id: options.serviceName + ':' + options.version,
    group: options.group,
    keepAlive: true
  });
  this.port = options.port;
  this.funcs = [];
  this.timer;
}

util.inherits(AutoChecker, EventEmitter);

AutoChecker.prototype.registFunc = function (name) {
  this.funcs.push(name);
};

AutoChecker.prototype.start = function () {
  clearInterval(this.timer);
  //60秒检查一次
  this.timer = setInterval(this.doCheck.bind(this), 60000);
};

AutoChecker.prototype.stop = function () {
  clearInterval(this.timer);
};

AutoChecker.prototype.doCheck = function () {
  var addressInfo = this.checkAddress();
  if (addressInfo) {
    return this.emit('autocheck', addressInfo);
  }
  this.checkFunction();
};

/**
 * 检查本台机器是否注册到config server上了
 */
AutoChecker.prototype.checkAddress = function () {
  var addresses = this.consumer.fetchAddress();
  if (addresses.length === 0) {
    return 'can not get address from config server';
  }
  var netlist = os.networkInterfaces();
  var exist = null;
  var hsfPort = this.port;
  for (var key in netlist) {
    var eth = netlist[key];
    for (var i = 0, length = eth.length; i < length; i++) {
      var v = eth[i];
      if (v.internal) {
        continue;
      }
      var address = v.address + ':' + hsfPort;
      if (addresses.indexOf(address) >= 0) {
        exist = address;
        break;
      }
    }
    if (exist) {
      break;
    }
  }
  if (!exist) {
    return 'hsf server on ' + os.hostname() + ' publish error';
  }
  return null;
};

/**
 * 检查所有的方法是否不会有hsf的错误
 */
AutoChecker.prototype.checkFunction = function () {
  var emited = false;
  var self = this;
  function _invoke(funcName) {
    self.consumer.invoke(funcName, [], function (err, data) {
      if (err && !emited) {
        self.emit('autocheck','function ' + funcName + ' return error ' + err.message);
        emited = true;
      }
    });
  }
  for (var i = 0, l = self.funcs.length; i < l; i++) {
    _invoke(self.funcs[i]);
  }
};

exports.create = function (options) {
  return new AutoChecker(options);
};
