/*!
 * hsf - logger.js
 * Copyright(c) 2012 Taobao.com
 * Author: busi.hyy <busi.hyy@taobao.com>, suqian.yf <suqian.yf@taobao.com>
 */

/**
 * Module dependencies.
 */

var debug = require('debug')('hsf:logger');
var fs = require('fs');
var util = require('util');
var Stream = require('stream');

var Logger = function(options) {
  options = options || {};
  var logger = options.logger || options.logfile; //logfile for backward compatible
  this.handleLog = defaultLog.bind(this);
  if (typeof logger === 'string') {
    this._logstream = fs.createWriteStream(logger, {flags: 'a'});
  } else if (logger instanceof Stream) {
    this._logstream = logger;
  } else if (typeof logger === 'function') {
    this.handleLog = logger;
  }
  this._debug = options.debug;
  if (options.logOff) {
    for (var key in this) {
      if (typeof this[key] === 'function') {
        this[key] = noop;
      }
    }
  }
};

function noop () {
}

function defaultLog(msg) {
  var msg = '[' + new Date() + '] [' + process.pid + '] ' + msg;
  debug(msg);
  if (this._logstream) {
    this._logstream.writable && this._logstream.write(msg + '\n');
  } else {
    if (process.env.NODE_ENV !== 'test') {
      console.log(msg);
    }
  }
}

Logger.prototype.log = function (text, arg1, arg2) {
  this.handleLog('[HSF] ' + util.format.apply(util, arguments));
};

Logger.prototype.warn = function (text, arg1, arg2) {
  this.handleLog('[HSF] [WARN] ' + util.format.apply(util, arguments));
};

Logger.prototype.error = function (err) {
  this.log('[ERROR] %s: %s\n%s', err.name, err.message, err.stack);
};

Logger.prototype.debug = function () {
  if (this._debug) {
    var args = Array.prototype.slice.call(arguments);
    args[0] = '[DEBUG] ' + args[0];
    this.log.apply(this, args);
  }
};

Logger.prototype.logClient = function (msg, socket, input) {
  this.log('[Client:%s:%s] %s, %j', socket.remoteAddress, socket.remotePort, msg, input);
};

Logger.prototype.debugClient = function (msg, socket, input) {
  this.debug('[Client:%s:%s] %s, %j', socket.remoteAddress, socket.remotePort, msg, input);
};

Logger.prototype.logConsumer = function(id, msg, input) {
  this.log('[Consumer: %s] %s, %s', id, msg, input||'');
};

Logger.prototype.debugConsumer = function(id, msg, input) {
  this.debug('[Consumer: %s] %s, %s', id, msg, input||'');
};

Logger.prototype.logInvoke = function(id, msg, funcName, args) {
  this.log('[Consumer: %s] %s, %s(%s)', id, msg, funcName, args);
};

Logger.prototype.debugInvoke = function(id, msg, funcName, args) {
  this.debug('[Consumer: %s] %s, %s(%s)', id, msg, funcName, args);
};

Logger.prototype.destroy = function() {
    if (this._logstream) {
    this.log('logstream end()');
    this._logstream.end();
    this._logstream = null;
  }
};

module.exports = function(options) {
  return new Logger(options);
};
