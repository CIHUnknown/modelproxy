/**!
 * hsf - consumer/hsf_client.js
 *
 * Copyright(c) 2012 - 2014 Alibaba Group Holding Limited.
 *
 * Authors:
 *   busi.hyy <busi.hyy@taobao.com>
 *   suqian.yf <suqian.yf@taobao.com>
 */

'use strict';

/**
 * Module dependencies.
 */

var debug = require('debug')('hsf:client');
var copy = require('copy-to');
var ConfigClient = require('../config_client');
var createLogger = require('../logger');
var Consumer = require('./keepalive_consumer');
var NoKeepaliveConsumer = require('./nokeepalive_consumer');
var DirectConsumer = require('./direct_consumer');

/**
 * create a new hsfClient
 * @param  {Object} options global config
 * @return {HsfClient}
 * @public
 */
exports.createClient = function (options) {
  return new HsfClient(options);
};

exports.Consumer = Consumer;
exports.NoKeepaliveConsumer = NoKeepaliveConsumer;

var _configClientCache = {};

/**
 * HSFClient
 * @param {Object} options globalConfig
 *  - configSvr : config server host
 *  - responseTimeout: each invoke response timeout, defualt 3000ms
 *  - routeInterval: refresh provider addresses interval, default 60000ms
 *  - snapshot: use snapshot or not, default false
 *  - snapshotDir: dir where save snapshots, default ${TMPDIR} + '/node_hsf_config_snapshots'
 *  - keepAlive: keepAlive conenct, default true
 * @constructor
 */
var HsfClient = function (options) {
  options = options || {};
  this.options = {};
  this.options.configSvr = options.configSvr;
  this.options.responseTimeout = options.responseTimeout || 3000;
  this.options.routeInterval = options.routeInterval || 60000;
  this.options.routeTimeout = options.routeTimeout;
  this.options.snapshot = options.snapshot;
  this.options.snapshotDir = options.snapshotDir;
  this.options.trafficStatistics = !!options.trafficStatistics;
  // default use keepalive
  this.options.keepAlive = options.keepAlive === false ? false : true;
  this.options.noDelay = options.noDelay === false ? false : true;
  this.options.logger = this.logger = options.logger;
  if (!this.logger) {
    this.options.logger = this.logger = createLogger(options);
  }

  this.options.configclient = options.configclient || _configClientCache[this.options.configSvr];
  if (!this.options.configclient) {
    // never close the exists config client before process exit
    this.options.configclient = new ConfigClient({
      masterIp: this.options.configSvr,
      port: 9603,
      root: '/config-sdk',
      refreshInterval: this.options.routeInterval,
      timeout: this.options.routeTimeout,
      snapshot: this.options.snapshot,
      snapshotDir: this.options.snapshotDir,
      logger: this.logger
    });
    _configClientCache[this.options.configSvr] = this.options.configclient;
  }
};

/**
 * create a consumer
 * @param  {string} interfaceName
 * @param  {string} version
 * @param  {object} options
 *  - {String} group service group, default is 'HSF'
 *  - routeInterval
 *  - responseTimeout
 *  - id, optional, can use this instance of interface&version
 *  - keepAlive, keepAlive connect
 * @return {Consumer}
 * @public
 */
HsfClient.prototype.createConsumer = function (interfaceName, version, options) {
  if (interfaceName instanceof Object) {
    // createConsumer(options)
    options = interfaceName;
  } else {
    // createConsumer(interfaceName, version, options)
    options = options || {};
    options.id = interfaceName + ':' + version;
  }

  if (typeof options.id !== 'string') {
    var err = new Error('options must content string type `id`');
    err.name = 'HSFCreateConsumerError';
    throw err;
  }

  options.group = options.group || 'HSF';
  copy(this.options).to(options);

  this.logger.log('HSFConsumer %s:%s created', options.id, options.group);

  if (options.serverHost) {
    return new DirectConsumer(options);
  }

  // 如果不是keepAlive连接，则返回NoKeepaliveConsumer实例
  var keepAlive = options.keepAlive === false ? false : this.options.keepAlive;
  if (keepAlive) {
    return new Consumer(options);
  }

  return new NoKeepaliveConsumer(options);
};
