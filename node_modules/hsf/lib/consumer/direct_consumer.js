/**!
 * node-hsf - lib/consumer/direct_consumer.js
 *
 * Copyright(c) Alibaba Group Holding Limited.
 * MIT Licensed
 *
 * Authors:
 *   不四 <busi.hyy@taobao.com>
 *   苏千 <suqian.yf@alibaba-inc.com> (http://fengmk2.github.com)
 */

'use strict';

/**
 * Module dependencies.
 */

var util = require('util');
var net = require('net');
var debug = require('debug')('hsf:consumer:direct');
var urlparse = require('url').parse;
var Consumer = require('./keepalive_consumer');

module.exports = DirectConsumer;

/**
 * 继承于Consumer类，实现了根据真实的 server host 来进行调用
 * @param {Object} options
 */
function DirectConsumer(options) {
  // directly call from remote host
  this.serverHost = options.serverHost;
  if (this.serverHost) {
    if (!Array.isArray(this.serverHost)) {
      this.serverHost = [this.serverHost];
    }
    for (var i = 0, l = this.serverHost.length; i < l; i++) {
      if (typeof this.serverHost[i] === 'string') {
        this.serverHost[i] = urlparse('hsf://' + this.serverHost[i], true);
      }
    }
  }

  if (!this.serverHost || this.serverHost.length === 0) {
    throw new TypeError('options.serverHost required');
  }

  Consumer.call(this, options);
}

util.inherits(DirectConsumer, Consumer);

var proto = DirectConsumer.prototype;

// private methods

proto._init = function () {
  process.nextTick(function () {
    this._refreshProviders(this.serverHost);
    debug('%s inited, got %d providers', this.id, this.providers.length);
    this.inited = true;
    this.emit('init');
  }.bind(this));
};

proto._handleError = function (client, err) {
  var provider;
  for (var i =  0, l = this.providers.length; i < l; i++) {
    provider = this.providers[i];
    if (provider.client === client) {
      debug('%s\'s provider get error: %s, host is %s', this.id, err.message,
        provider.address.host);
      this.providers.splice(i, 1);
      break;
    }
  }

  if (provider && this.providers.length < this.serverHost.length) {
    debug('_handleError() %s add new provider: %j', this.id, provider.address.host);
    var newClient = this._createConnection(provider.address);
    var nohsf = String(provider.address.query._NOHSF) === '1';
    this.providers.push({
      address: provider.address,
      client: newClient,
      nohsf: nohsf,
    });
  }
};
