/*!
 * hsf - transcode.js
 * Copyright(c) 2012 Taobao.com
 * author: busi.hyy <busi.hyy@taobao.com>
 */

/**
 * Module dependencies.
 */

var hsfProtocol = require('hsf-protocol');
try {
  hsfProtocol = require('hsf-protocol-cpp');
} catch (err) {
  console.warn('使用纯 js 版本的 hsf 序列化，可以通过 `tnpm install --save hsf-protocol-cpp` 使用高性能的 c++ 版本协议');
}

var transcode = {
  genReqBody: hsfProtocol.genReqBody,
  csRegistEncode: hsfProtocol.csRegistEncode,
  csPublishEncode: hsfProtocol.csPublishEncode,
  csDoPublishEncode: hsfProtocol.csDoPublishEncode
};

var SEP = '\u0006';

function _removeClassInfo(obj) {
  if (!obj || !obj.$class || !obj.$) {
    return obj;
  }
  var data = obj.$;
  if (Array.isArray(data)) {
    for (var i = 0; i < data.length; i++) {
      data[i] = _removeClassInfo(data[i]);
    }
  } else if (data instanceof Object) {
    for (var key in data) {
      data[key] = _removeClassInfo(data[key]);
    }
  }
  return data;
}

transcode.requestEncode = function (id, name, packetId, args, nohsf) {
  if (nohsf) {
    return _nodeEncode(name + SEP + packetId + SEP + JSON.stringify(_removeClassInfo(args)));
  }
  return hsfProtocol.requestEncode(packetId, {
    methodName: name,
    serverSignature: id,
    args: args
  });
};

transcode.requestDecode = function (buf) {
  if (!Buffer.isBuffer(buf)) {
    throw new Error('Decode Request Error: Input must be buffer type!');
  }
  if (buf.length < 14 || buf.length > 5 * 1024 * 1024) {
    throw new Error('Decode Request Error: decode buffer error!');
  }
  if (buf.readUInt8(1) === 2) {
    return _nodeRequestDecode(buf);
  }
  return hsfProtocol.requestDecode(buf);
};

transcode.responseEncode = function (packetId, result, errmsg, nohsf) {
  if (nohsf) {
    var resultWrap = {r: _removeClassInfo(result)};
    return _nodeEncode(packetId + SEP + (errmsg || '') + SEP + JSON.stringify(resultWrap));
  }
  return hsfProtocol.responseEncode(packetId, {
    appResponse: result,
    errorMsg: errmsg
  });
};

transcode.responseDecode = function (buf) {
  if (!Buffer.isBuffer(buf)) {
    throw new Error('Decode Response Error: Input must be buffer type!');
  }
  if (buf.length < 14 || buf.length > 5 * 1024 * 1024) {
    throw new Error('Decode Response Error: decode buffer error!');
  }
  if (buf.readUInt8(1) === 2) {
    return _nodeResponseDecode(buf);
  }
  return hsfProtocol.responseDecode(buf);
};

function _nodeEncode(input) {
  var packet = new Buffer(input);
  var length = packet.length;
  var header = new Buffer(14);
  header.fill(0);
  header.writeUInt8(2, 1);
  header.writeUInt32BE(length, 5);
  var result = new Buffer(14 + length);
  header.copy(result, 0, 0);
  packet.copy(result, 14, 0);
  return result;
}

function _nodeRequestDecode(buf) {
  var req = buf.slice(14).toString().split(SEP);
  if (req.length < 3) {
    throw new Error('input format error!');
  }
  var methodName = req.shift();
  var packetId = parseInt(req.shift(), 10);
  var args = req.join(SEP);
  args = args ? JSON.parse(args) : args;
  return {
    packetType: !methodName ? 'HEARTBEAT' : 'node',
    packetId: packetId,
    methodName: methodName,
    args: args,
    nohsf: true
  };
}

transcode.heartbeatEncode = function (packetId, nohsf) {
  if (nohsf) {
    return _nodeHeartbeatEncode(packetId);
  }
  return hsfProtocol.heartbeatEncode(packetId);
};

function _nodeHeartbeatEncode(packetId) {
  return _nodeEncode(SEP + packetId + SEP);
}

function _nodeResponseDecode(buf) {
  var res = buf.slice(14).toString().split(SEP);
  if (res.length < 3) {
    throw new Error('input format error!');
  }
  var packetId = parseInt(res.shift(), 10);
  var errorMsg = res.shift();
  var appResponse = JSON.parse(res.join(SEP)).r;
  return {
    packetType: 'node',
    packetId: packetId,
    isError: !!errorMsg,
    errorMsg: errorMsg,
    appResponse: appResponse,
    nohsf: true
  };
}

module.exports = exports = transcode;
