/*!
 * hsf - utils.js
 * Copyright(c) 2012 Taobao.com
 * author: busi.hyy <busi.hyy@taobao.com>
 */

/**
 * Module dependencies.
 */
var fs = require('fs');
var urllib = require('urllib');
var transcode = require('./transcode');
var urlModule = require('url');
exports.version = require('../package.json').version;

/**
 * get address info from buffer
 * @param  {Buffer} buf response of config server
 * @return {String||null}     address
 */
var parseAddress = exports.parseAddress = function (buf) {
  var infos = buf.toString('ascii', 3).split(/\n|;/);
  var map = {};
  var result = [];
  for (var i = 0, len = infos.length; i < len; i++) {
    var info = infos[i];
    if (info.trim() === '') {
      continue;
    }
    if (info.indexOf('://') === -1) {
      info = 'hsf://' + info;
    }
    var address = urlModule.parse(info, true);
    if (!map[address.host]) {
      map[address.host] = true;
      result.push(address);
    }
  }
  return result;
};

/**
 * get address info from config server
 * @param {String} configSvr
 * @param {String} id          ex:'com.taobao.nodejs.service:1.0.0'
 * @param {String} group       ex: 'HSF' or 'DAILY'
 * @param {Function} callback
 */
exports.getAddress = function(configSvr, id, group, callback) {
  var body = transcode.genReqBody(id, group);
  var reqArgs = {
    type : 'POST',
    headers : {
      'config-sdk' : '1.5',
      'User-Agent' : 'hsfnode'
    },
    data : body
  };
  urllib.request('http://' + configSvr + ':9603/config-sdk', reqArgs, function(err, buf) {
    if (err) {
      return callback(err);
    }
    return callback(null, parseAddress(buf));
  });
};

/**
 * get config server address for publish
 * @param {String} [configSvr]
 * @param {Function} [callback]
 */
exports.getCSAddress = function(configSvr, callback) {
  exports.getAddress(configSvr, 'com.taobao.config.serverlist', 'DEFAULT_GROUP', function(err, data) {
    if (err) {
      callback(err);
    } else {
      var result = [];
      for (var i = data.length; i--;) {
        data[i].hostname && result.push(data[i].hostname);
      }
      callback(null, result);
    }
  });
};

/**
 * get address info from snapshot
 * @param {String} path
 * @param {Function} callback
 */
exports.getAddressFromSnapshot = function(path, callback) {
  fs.readFile(path, function(err, data) {
    if (err) {
      callback(err);
    } else {
      var addresses = [];
      try {
        addresses = JSON.parse(data);
      } catch (err) {
        return callback(err);
      }
      callback(null, addresses);
    }
  });
};

exports.takeSnapshot = function(path, addresses) {
  fs.writeFile(path, JSON.stringify(addresses));
};

/**
 * get local ip
 * @return {String}
 */
exports.getLocalAddress = function() {
  var os = require('os');
  var ifaces = os.networkInterfaces();
  for (var dev in ifaces) {
    for (var l = ifaces[dev].length; l--; ) {
      var details = ifaces[dev][l];
      if (details.family === 'IPv4' && details.address !== '127.0.0.1') {
        return details.address;
      }
    }
  }
  return null;
};

exports.debugAddress = function(addresses) {
  addresses = addresses || [];
  if (!Array.isArray(addresses)) {
    addresses = [addresses];
  }

  return addresses.map(function (address) {
    return address.host;
  });
};

exports.packetLength = function (data) {
  return Buffer.isBuffer(data) ? 14 + data.readUInt32BE(5) + data.readUInt8(9) + data.readUInt32BE(10) : 0;
};
